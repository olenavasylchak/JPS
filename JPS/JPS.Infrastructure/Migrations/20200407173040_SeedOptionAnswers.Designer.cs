// <auto-generated />
using System;
using JPS.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JPS.Domain.Entities.Migrations
{
    [DbContext(typeof(JPSContext))]
    [Migration("20200407173040_SeedOptionAnswers")]
    partial class SeedOptionAnswers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JPS.Domain.Entities.Entities.AnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 2,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 3,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 4,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 5,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 6,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 7,
                            QuestionId = 7,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 8,
                            QuestionId = 8,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 9,
                            QuestionId = 9,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 10,
                            QuestionId = 10,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 11,
                            QuestionId = 11,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 12,
                            QuestionId = 1,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 13,
                            QuestionId = 2,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 14,
                            QuestionId = 3,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 15,
                            QuestionId = 4,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 16,
                            QuestionId = 5,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 17,
                            QuestionId = 6,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 18,
                            QuestionId = 7,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 19,
                            QuestionId = 8,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 20,
                            QuestionId = 9,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 21,
                            QuestionId = 10,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 22,
                            QuestionId = 11,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = 23,
                            QuestionId = 2,
                            UserId = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = 24,
                            QuestionId = 9,
                            UserId = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "JSPSurvey"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ParentCategoryId = 1,
                            Title = "ESAT"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.DateAnswerEntity", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AnswerId");

                    b.ToTable("DateAnswers");

                    b.HasData(
                        new
                        {
                            AnswerId = 16,
                            Date = new DateTimeOffset(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            AnswerId = 5,
                            Date = new DateTimeOffset(new DateTime(1995, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.FileAnswerEntity", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("FileId");

                    b.ToTable("FileAnswers");
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.FileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.OptionAnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int?>("OptionRowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionRowId");

                    b.ToTable("OptionAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerId = 1,
                            OptionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerId = 12,
                            OptionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerId = 2,
                            OptionId = 4
                        },
                        new
                        {
                            Id = 4,
                            AnswerId = 13,
                            OptionId = 4
                        },
                        new
                        {
                            Id = 5,
                            AnswerId = 23,
                            OptionId = 3
                        },
                        new
                        {
                            Id = 6,
                            AnswerId = 3,
                            OptionId = 5
                        },
                        new
                        {
                            Id = 7,
                            AnswerId = 14,
                            OptionId = 6
                        },
                        new
                        {
                            Id = 8,
                            AnswerId = 7,
                            OptionId = 8
                        },
                        new
                        {
                            Id = 9,
                            AnswerId = 18,
                            OptionId = 7
                        },
                        new
                        {
                            Id = 10,
                            AnswerId = 8,
                            OptionId = 9,
                            OptionRowId = 1
                        },
                        new
                        {
                            Id = 11,
                            AnswerId = 19,
                            OptionId = 10,
                            OptionRowId = 2
                        },
                        new
                        {
                            Id = 12,
                            AnswerId = 9,
                            OptionId = 12,
                            OptionRowId = 1
                        },
                        new
                        {
                            Id = 13,
                            AnswerId = 20,
                            OptionId = 11,
                            OptionRowId = 2
                        },
                        new
                        {
                            Id = 14,
                            AnswerId = 24,
                            OptionId = 12,
                            OptionRowId = 2
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.OptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            Text = "option 1"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 1,
                            Text = "option 2"
                        },
                        new
                        {
                            Id = 3,
                            Order = 2,
                            QuestionId = 2,
                            Text = "option 1"
                        },
                        new
                        {
                            Id = 4,
                            Order = 1,
                            QuestionId = 2,
                            Text = "option 2"
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 3,
                            Text = "option 1"
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 3,
                            Text = "option 2"
                        },
                        new
                        {
                            Id = 7,
                            QuestionId = 7,
                            Text = "option 1",
                            Value = 1m
                        },
                        new
                        {
                            Id = 8,
                            QuestionId = 7,
                            Text = "option 2",
                            Value = 2m
                        },
                        new
                        {
                            Id = 9,
                            QuestionId = 8,
                            Text = "option 1"
                        },
                        new
                        {
                            Id = 10,
                            QuestionId = 8,
                            Text = "option 2"
                        },
                        new
                        {
                            Id = 11,
                            QuestionId = 9,
                            Text = "option 1"
                        },
                        new
                        {
                            Id = 12,
                            QuestionId = 9,
                            Text = "option 2"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.OptionRowEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("QuestionId");

                    b.ToTable("OptionRows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 8,
                            Text = "optionRow 1"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 8,
                            Text = "optionRow 2"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 8,
                            Text = "optionRow 3"
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 9,
                            Text = "optionRow 1"
                        },
                        new
                        {
                            Id = 5,
                            QuestionId = 9,
                            Text = "optionRow 2"
                        },
                        new
                        {
                            Id = 6,
                            QuestionId = 9,
                            Text = "optionRow 3"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.ParagraphAnswerEntity", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerId");

                    b.ToTable("ParagraphAnswers");

                    b.HasData(
                        new
                        {
                            AnswerId = 10,
                            Text = "Paragraph answer here"
                        },
                        new
                        {
                            AnswerId = 21,
                            Text = "Paragraph answer here"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.PollEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FinishesAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("StartsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Polls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "It`s an ESAT 2019 poll.",
                            FinishesAt = new DateTimeOffset(new DateTime(2019, 10, 20, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsAnonymous = false,
                            StartsAt = new DateTimeOffset(new DateTime(2019, 10, 10, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "ESAT 2019"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "It`s an ESAT 2020 poll.",
                            FinishesAt = new DateTimeOffset(new DateTime(2019, 6, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsAnonymous = false,
                            StartsAt = new DateTimeOffset(new DateTime(2020, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "ESAT 2020"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "It`s an anonymous poll.",
                            FinishesAt = new DateTimeOffset(new DateTime(2019, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsAnonymous = true,
                            StartsAt = new DateTimeOffset(new DateTime(2020, 4, 10, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Anonymous"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSectionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("QuestionSectionId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("VideoId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRequired = true,
                            Order = 1,
                            QuestionSectionId = 3,
                            QuestionTypeId = 3,
                            Text = "How are you?"
                        },
                        new
                        {
                            Id = 2,
                            IsRequired = false,
                            Order = 2,
                            QuestionSectionId = 3,
                            QuestionTypeId = 4,
                            Text = "Why are you crying?"
                        },
                        new
                        {
                            Id = 3,
                            IsRequired = true,
                            Order = 3,
                            QuestionSectionId = 3,
                            QuestionTypeId = 5,
                            Text = "Choose your sex?"
                        },
                        new
                        {
                            Id = 4,
                            IsRequired = false,
                            Order = 4,
                            QuestionSectionId = 3,
                            QuestionTypeId = 6,
                            Text = "Download your selfie"
                        },
                        new
                        {
                            Id = 5,
                            IsRequired = true,
                            Order = 5,
                            QuestionSectionId = 3,
                            QuestionTypeId = 10,
                            Text = "When were you born?"
                        },
                        new
                        {
                            Id = 6,
                            IsRequired = true,
                            Order = 2,
                            QuestionSectionId = 4,
                            QuestionTypeId = 1,
                            Text = "Short feedback about company"
                        },
                        new
                        {
                            Id = 7,
                            IsRequired = true,
                            Order = 1,
                            QuestionSectionId = 4,
                            QuestionTypeId = 7,
                            Text = "Are you satisfied with the service in our company?"
                        },
                        new
                        {
                            Id = 8,
                            IsRequired = true,
                            Order = 3,
                            QuestionSectionId = 4,
                            QuestionTypeId = 8,
                            Text = "Rate our work"
                        },
                        new
                        {
                            Id = 9,
                            IsRequired = true,
                            Order = 4,
                            QuestionSectionId = 4,
                            QuestionTypeId = 9,
                            Text = "What did you respect in"
                        },
                        new
                        {
                            Id = 10,
                            IsRequired = true,
                            Order = 1,
                            QuestionSectionId = 5,
                            QuestionTypeId = 2,
                            Text = "What are you think about your team?"
                        },
                        new
                        {
                            Id = 11,
                            IsRequired = true,
                            Order = 2,
                            QuestionSectionId = 5,
                            QuestionTypeId = 11,
                            Text = "When would you like to come to work?"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.QuestionSectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("QuestionSections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Here will be questions about you.",
                            Order = 1,
                            PollId = 1,
                            Title = "About you"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Here will be questions about you.",
                            Order = 1,
                            PollId = 3,
                            Title = "About you"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Here will be questions about you.",
                            Order = 1,
                            PollId = 2,
                            Title = "About you"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Here will be questions about company.",
                            Order = 2,
                            PollId = 2,
                            Title = "About company"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Here will be questions about team.",
                            Order = 3,
                            PollId = 2,
                            Title = "About team"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.QuestionTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Text"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Paragraph"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Multiple choice"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Checkboxes"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Dropdown"
                        },
                        new
                        {
                            Id = 6,
                            Title = "File upload"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Linear scale"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Multiple choice grid"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Checkbox grid"
                        },
                        new
                        {
                            Id = 10,
                            Title = "Date"
                        },
                        new
                        {
                            Id = 11,
                            Title = "Time"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.TextAnswerEntity", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("AnswerId");

                    b.ToTable("TextAnswers");

                    b.HasData(
                        new
                        {
                            AnswerId = 6,
                            Text = "Something"
                        },
                        new
                        {
                            AnswerId = 17,
                            Text = "Something 2"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.TimeAnswerEntity", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("AnswerId");

                    b.ToTable("TimeAnswers");

                    b.HasData(
                        new
                        {
                            AnswerId = 11,
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            AnswerId = 22,
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "6b4b7339-1f6c-41bc-885f-3eee80d2f7c2"
                        },
                        new
                        {
                            Id = "5fc39df2-aea1-405d-b887-b7167fb3d60b"
                        },
                        new
                        {
                            Id = "39be8196-adbd-405e-a4ed-9025abdaaec7"
                        },
                        new
                        {
                            Id = "7ad340b8-5610-4aef-9531-808dd8befa06"
                        },
                        new
                        {
                            Id = "e661b6a9-aa0d-44e2-9013-a267dfed12ef"
                        });
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.VideoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.AnswerEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.QuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JPS.Domain.Entities.Entities.UserEntity", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.CategoryEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.CategoryEntity", "Category")
                        .WithMany("Categories")
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.DateAnswerEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.AnswerEntity", "Answer")
                        .WithOne("DateAnswer")
                        .HasForeignKey("JPS.Domain.Entities.Entities.DateAnswerEntity", "AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.FileAnswerEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.AnswerEntity", "Answer")
                        .WithOne("FileAnswer")
                        .HasForeignKey("JPS.Domain.Entities.Entities.FileAnswerEntity", "AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JPS.Domain.Entities.Entities.FileEntity", "File")
                        .WithMany("FileAnswers")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.OptionAnswerEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.AnswerEntity", "Answer")
                        .WithMany("OptionAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JPS.Domain.Entities.Entities.OptionEntity", "Option")
                        .WithMany("OptionAnswers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JPS.Domain.Entities.Entities.OptionRowEntity", "OptionRow")
                        .WithMany("OptionAnswers")
                        .HasForeignKey("OptionRowId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.OptionEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.ImageEntity", "Image")
                        .WithMany("Options")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JPS.Domain.Entities.Entities.QuestionEntity", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.OptionRowEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.ImageEntity", "Image")
                        .WithMany("OptionRows")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JPS.Domain.Entities.Entities.QuestionEntity", "Question")
                        .WithMany("OptionRows")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.ParagraphAnswerEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.AnswerEntity", "Answer")
                        .WithOne("ParagraphAnswer")
                        .HasForeignKey("JPS.Domain.Entities.Entities.ParagraphAnswerEntity", "AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.PollEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.CategoryEntity", "Category")
                        .WithMany("Polls")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.QuestionEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.ImageEntity", "Image")
                        .WithMany("Questions")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JPS.Domain.Entities.Entities.QuestionSectionEntity", "QuestionSection")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JPS.Domain.Entities.Entities.QuestionTypeEntity", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JPS.Domain.Entities.Entities.VideoEntity", "Video")
                        .WithMany("Questions")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.QuestionSectionEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.PollEntity", "Poll")
                        .WithMany("QuestionSections")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.TextAnswerEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.AnswerEntity", "Answer")
                        .WithOne("TextAnswer")
                        .HasForeignKey("JPS.Domain.Entities.Entities.TextAnswerEntity", "AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JPS.Domain.Entities.Entities.TimeAnswerEntity", b =>
                {
                    b.HasOne("JPS.Domain.Entities.Entities.AnswerEntity", "Answer")
                        .WithOne("TimeAnswer")
                        .HasForeignKey("JPS.Domain.Entities.Entities.TimeAnswerEntity", "AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
